name: OnePlus Ace5Pro
on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "ËØ∑ÈÄâÊã©Ë¶ÅÁºñËØëÁöÑÊú∫ÂûãÔºö"
        required: true
        type: choice
        options:
          - 'oneplus_ace5_pro'
        default: 'oneplus_ace5_pro'
      boot:
        type: choice
        description: "ÈÄâÊã©‰øÆË°•bootÊñπÊ≥ï"
        required: false
        default: boot2
        options:
          - boot1
          - boot2
      CPU:
        description: "ÂàÜÊîØ"
        required: true
        default: 'sm8750'
      FEIL:
        description: "ÈÖçÁΩÆÊñá‰ª∂"
        required: true
        default: 'oneplus_ace5_pro'
      CPUD:
        description: "Â§ÑÁêÜÂô®‰ª£Âè∑"
        required: true
        default: 'sun'
      ANDROID_VERSION:
        description: "ÂÜÖÊ†∏ÂÆâÂçìÁâàÊú¨"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "ÂÜÖÊ†∏ÁâàÊú¨"
        required: true
        default: '6.6'
      KERNEL_NAME:
        description: "‰øÆÊîπÂÜÖÊ†∏ÂêçÁß∞(‰∏çÊîØÊåÅ‰∏≠ÊñáÂíåË°®ÊÉÖ)"
        required: true
        default: '-android15-8-g013ec21bba94-abogki383916444'
        
      KPM:
        description: "ÊòØÂê¶ÂêØÁî®KPM"
        required: false
        default: false
        type: boolean
        
      

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: üìä Check disk space (Ê£ÄÊü•Á£ÅÁõòÁ©∫Èó¥)
        run: |
          echo "ÊûÑÂª∫ÂâçÁ£ÅÁõòÁ©∫Èó¥Ôºö"
          df -h

      - name: ‚öôÔ∏è Set REPO_MANIFEST (ËÆæÁΩÆÂØπÂ∫îÊú∫ÂûãÈÖçÁΩÆÊñá‰ª∂)
        id: set_manifest
        run: |
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            oneplus_ace5_pro)
              echo "REPO_MANIFEST=oneplus_ace5_pro_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_ace5_pro" >> $GITHUB_ENV
              ;;
          esac

      - name: ‚öôÔ∏è Set device-specific CCACHE_DIR (ËÆæÁΩÆÂØπÂ∫îÊú∫ÂûãCcecheË∑ØÂæÑ)
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${REPO_MANIFEST}" >> $GITHUB_ENV

      - name: üì¶ Configure Git (ËÆæÁΩÆ‰∏ãËΩΩË¥¶Êà∑)
        run: |
          git config --global user.name "ace5pro"
          git config --global user.email "521418@qq.com"

      - name: üõ† Configure APT caching (ÈÖçÁΩÆAPTÁºìÂ≠ò)
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: üõ† Cache APT packages (ÁºìÂ≠òAPTÂåÖ)
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/Build_oneplus_sm8750.yaml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: üì¶ Install dependencies (ÂÆâË£Ö‰æùËµñ)
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 git curl ccache libelf-dev \
            build-essential flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip
          
          echo "‚úÖ ‰æùËµñÂÆâË£ÖÂÆåÊàê"
          
      - name: üì• Restore ccache (ËΩΩÂÖ• Êú∫ÂûãÔºö${{ env.DEVICES_NAME }}ÁöÑ ccache ÁºìÂ≠ò)
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.ref }}-${{ env.REPO_MANIFEST }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ env.REPO_MANIFEST }}-
            ccache-${{ runner.os }}-

      - name: üì• Init ccache (Â¶ÇÊûúÊòØÁ¨¨‰∏ÄÊ¨°ËøêË°åÂàôÂàùÂßãÂåñCceche)
        run: |
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"

          INIT_FLAG="$CCACHE_DIR/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              echo "ÂàùÂßãÂåñ ccache ($CCACHE_DIR)..."
              mkdir -p "$CCACHE_DIR"
              ccache -M "$CCACHE_MAXSIZE"
              touch "$INIT_FLAG"
            else
              echo "ccache Â∑≤ÂàùÂßãÂåñÔºåË∑≥Ëøá"
            fi
          else
            echo "Êú™ÂÆâË£Ö ccacheÔºåË∑≥Ëøá"
          fi
      
      - name: Install repo tool
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
         
      - name: Export suffix
        run: |
          echo "TAG_SUFFIX=${{ github.event.inputs.CPU }}" >> $GITHUB_ENV
         
      - name: Set up SukiSU
        run: |
         cd kernel_workspace/kernel_platform
         curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
         cd ./KernelSU
         # ÊõøÊç¢ get_ksu_kernel_version Âùó‰∏∫Ëá™ÂÆö‰πâÊ†ºÂºè
         sed -i "/^define get_ksu_kernel_version$/,/^endef$/c\
         define get_ksu_kernel_version\\
         v\$(KSU_API_VERSION_LOCAL)-sukisu-\$(KSU_API_VERSION)-cpu-${TAG_SUFFIX}\\
         endef" kernel/Makefile
         echo "‚úÖ Injected SukiSU kernel version: v\$(KSU_API_VERSION_LOCAL)-sukisu-\$(KSU_API_VERSION)-cpu-${TAG_SUFFIX}"
         KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10700)
         echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
         export KSU_VERSION=$KSU_VERSION
         sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
        
      - name: Set up susfs
        run: |
           cd kernel_workspace
           git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
           git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
           
           cd kernel_platform        
           cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
           cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
           cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

           
           
           # Apply patches
           cd ./common

           sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch
           sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch

           patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true
           cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
           patch -p1 -F 3 < syscall_hooks.patch
           echo "ÂÆåÊàê"
           
      - name: ‚öôÔ∏è Set KERNEL_TIME (ËÆæÁΩÆÂØπÂ∫îÊú∫ÂûãÊûÑÂª∫Êó∂Èó¥)
        run: |
          echo 'KERNEL_TIME=Tue Dec 17 23:36:49 UTC 2024' >> $GITHUB_ENV
      
      - name: Apply Hide Stuff Patches
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "Ê≠£Âú®ÊâìÈöêËóèÂ∫îÁî®Ë°•‰∏Å"
          patch -p1 -F 3 < 69_hide_stuff.patch
          echo "ÈöêËóèÂ∫îÁî®_patchÂÆåÊàê"
          
      - name: üîß Update compression algorithms (Êõ¥Êñ∞ÂéãÁº©ÁÆóÊ≥ï)
        run: |
          cd kernel_workspace/kernel_platform/common
          
          # Êõ¥Êñ∞LZ4ÂÆûÁé∞
          curl -sSLO https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/lz4/lz4_decompress.c
          curl -sSLO https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/lz4/lz4defs.h
          curl -sSLO https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/lz4/lz4_compress.c
          curl -sSLO https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/lz4/lz4hc_compress.c
          
          # Êõ¥Êñ∞ZstdÂÆûÁé∞
          zstd_base="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/lib/zstd"
          mkdir -p lib/zstd && cd lib/zstd
          curl -sSL $zstd_base/zstd_common_module.c -o common.c
          curl -sSL $zstd_base/compress/zstd_compress_module.c -o compress.c
          curl -sSL $zstd_base/decompress/zstd_decompress_module.c -o decompress.c
          curl -sSL $zstd_base/zstd_compat.h -o compat.h
          
          cd ../../..
          echo "‚úÖ LZ4/Zstd ÁÆóÊ≥ïÊõ¥Êñ∞ÂÆåÊàê"

      - name: üîß Set gki_defconfig (ËÆæÁΩÆÁºñËØëÈÖçÁΩÆ)
        run: |
          cd kernel_workspace/kernel_platform
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig

          # Add VFS configuration settings
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          if [ "${{ github.event.inputs.enable_feature_x }}" = "true" ]; then
            echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          # ÂêØÁî®È´òÁ∫ßÂéãÁº©ÊîØÊåÅ
          echo "CONFIG_CRYPTO_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_ZSTD=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          # Êñá‰ª∂Á≥ªÁªüÁ∫ßÂéãÁº©ÊîØÊåÅ
          echo "CONFIG_F2FS_FS_COMPRESSION=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_ZSTD=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          # ÂÜÖÊ†∏ÈïúÂÉèÂéãÁº©ÈÖçÁΩÆ
          echo "CONFIG_KERNEL_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"
          
      
      - name: ÂêØÁî®kpm
        if: ${{ fromJSON(github.event.inputs.KPM) }}
        run: |
         cd kernel_workspace/kernel_platform
         echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
         sudo sed -i 's/check_defconfig//' ./common/build.config.gki
         cd common
         git add -A && git commit -a -m "BUILD Kernel"

      - name: ÂêØÁî®LTO
        run: |
         cd kernel_workspace/kernel_platform
         echo "CONFIG_LTO_CLANG=y" >> ./common/arch/arm64/configs/gki_defconfig
         echo "CONFIG_LTO_CLANG_THIN=y" >> ./common/arch/arm64/configs/gki_defconfig
         sudo sed -i 's/check_defconfig//' ./common/build.config.gki
         cd common
         git add -A && git commit -a -m "BUILD Kernel with LTO enabled"
      
      - name: Add make name
        run: |
         cd kernel_workspace/kernel_platform
         sed -i '186s|echo ".*"|echo "${KERNELVERSION}${scm_version}${config_localversion}"|' common/scripts/setlocalversion
         sed -i "s/\${scm_version}/${{ github.event.inputs.KERNEL_NAME }}/g" ./common/scripts/setlocalversion
         
      - name: boot1
        run: |
            if [ "${{ github.event.inputs.boot }}" = "boot1" ]; then
            cd kernel_workspace/kernel_platform/common
            sed -i '1iobj-y += hmbird_patch.o' drivers/Makefile
            wget https://github.com/t521418/patch/raw/main/hmbird_patch.patch
            echo "Ê≠£Âú®ÊâìOGKIËΩ¨Êç¢GKIË°•‰∏Å"
            patch -p1 -F 3 < hmbird_patch.patch
            echo "OGKIËΩ¨Êç¢GKI patchÂÆåÊàê"
            fi
            
        
      - name: boot2
        run: |
            if [ "${{ github.event.inputs.boot }}" = "boot2" ]; then
            cd kernel_workspace/kernel_platform/common
            wget https://github.com/t521418/patch/raw/main/property.patch
            echo "Ê≠£Âú®ÊâìOGKIËΩ¨Êç¢GKIË°•‰∏Å"
            patch -p1 -F 3 < property.patch
            echo "OGKIËΩ¨Êç¢GKI patchÂÆåÊàê"
            fi

      - name: Add sched_ext
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/t521418/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git

      
      - name: ÊãâÂèñafdo
        run: |
          cd kernel_workspace/kernel_platform/
          git clone https://github.com/t521418/afdo.git
            
      - name: üî® Build Kernel (ÊûÑÂª∫ÂÜÖÊ†∏)
        run: |
          export PATH="/usr/lib/ccache:$PATH"
          export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
          
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"
          
          # ËÆæÁΩÆ AFDO ÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑ
          export AFDO_PROFILE="${{ github.workspace }}/kernel_workspace/kernel_platform/afdo/kernel.afdo"
          if [ ! -f "$AFDO_PROFILE" ]; then
          echo "Error: AFDO profile not found at $AFDO_PROFILE"
          exit 1
          fi
          export KCFLAGS="-Wno-error -fauto-profile=$AFDO_PROFILE"
          export MAKE_ARGS="SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH}"
          
          # ÊâìÂç∞È™åËØÅ
          echo "KERNEL_TIME = $KERNEL_TIME"
          echo "SOURCE_DATE_EPOCH = $SOURCE_DATE_EPOCH"
          echo "Using KCFLAGS: -Wno-error -fauto-profile=$AFDO_PROFILE"
          export KBUILD_BUILD_TIMESTAMP="${KERNEL_TIME}"
          
          sudo apt install -y libelf-dev
          
          cd kernel_workspace/kernel_platform/common
          
         
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2  gki_defconfig
          
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2  Image
      
      - name: È™åËØÅÂÜÖÊ†∏ÊûÑÂª∫Êó∂Èó¥
        run: |
         strings kernel_workspace/kernel_platform/common/out/vmlinux | grep "UTC"
     
      - name: Make AnyKernel3
        run: |
         cd kernel_workspace/kernel_platform/common/out/arch/arm64/boot
         curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
         chmod +x patch_linux
         ./patch_linux
         rm -f Image
         mv oImage Image
         
      - name: Make AnyKernel3
        run: |
         git clone https://github.com/t521418/AnyKernel3.git --depth=1      
         rm -rf ./AnyKernel3/.git
         rm -rf ./AnyKernel3/push.sh
         cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3/

      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
         name: SuKiSu_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}
         path: ./AnyKernel3/*
         
      - name: üìä Post-build disk check (ÊûÑÂª∫ÂêéÁ©∫Èó¥Ê£ÄÊü•)
        run: |
          echo "ÊûÑÂª∫ÂêéÁ£ÅÁõòÁ©∫Èó¥Ôºö"
          df -h
